local import "prelude"

FunctionalTrie = {
  data case t _ _ :> {
    unit 'v         : opt v            ~> case {} v
    alt  'v 'k1 'k2 : t k1 v ~> t k2 v ~> case (alt k1 k2) v
    pair 'v 'k1 'k2 : t k1 (t k2 v)    ~> case (k1, k2) v
  }

  lookup = rec (lookup 'k 'v: t k v ~> k ~> opt v) =>
    case (type fun k v => k ~> opt v) {
      unit m {} = m
      alt ta tb = Alt.case {inl = lookup ta, inr = lookup tb}
      pair ta (a, b) = lookup ta a |> Opt.case {none, some tb = lookup tb b}
    }
}
