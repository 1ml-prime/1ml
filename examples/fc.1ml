local import "prelude"

;; The following snippets are inspired by examples from the paper
;;
;;   Martin Sulzmann, Manuel M. T. Chakravarty, Simon Peyton Jones, and Kevin
;;   Donnelly.  System F with Type Equality Coercions.
;;
;; Note that the snippets below contain some unnecessary type ascriptions for
;; clarity.

GADTs = {
  Exp = data case t _ :> {
    Zero       :               case int
    Succ       :      t int ~> case int
    Pair 'a 'b : t a ~> t b ~> case (a, b)
  }

  eval = rec (eval 'a: Exp.t a ~> a) =>
    Exp.case (type fun x => x) {
      Zero = 0
      Succ x = eval x + 1
      Pair l r = (eval l, eval r)
    }
}

AssociatedTypes = {
  type EQ = {
    type t
    == : t -> t -> bool
  }

  type COLLECTS = {
    Elem: {type t}
    type t
    empty: t
    insert: Elem.t -> t ~> t
  }

  CollectEq (Elem: EQ) :> COLLECTS with (Elem = Elem) = {
    empty = List.nil
    insert = List.::
  }

  BitSet :> COLLECTS with (Elem = Char) = {
    empty = List.nil
    insert = List.::
  }
}

FunctionalDependences = {
  type T a = (type F _) -> F a ~> F a

  F_int_bool = fun (_: (= int)) => bool

  combine 'a (f: T a) (g: T a) : T a = fun (type F _) => f F << g F
}

Newtype = rec {type T} => {type T = T ~> T}
