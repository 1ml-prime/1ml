local import "prelude"

;; 1ML is basically FÏ‰ plus recursive types, which gives enough power to encode
;; GADTs.  This HOAS example is adapted from:
;;
;;   https://github.com/palladin/idris-snippets/blob/master/src/HOAS.idr

data case t _ :> {
  Val 'x       :                           x ~> case x
  Bin 'x 'y 'z : (x ~> y ~> z) ~> t x ~> t y ~> case z
  If  'x       :      t Bool.t ~> t x ~> t x ~> case x
  App 'x 'y    :           t (x ~> y) ~> t x ~> case y
  Lam 'x 'y    :                (t x ~> t y) ~> case (x ~> y)
  Fix 'x 'y    :      t ((x ~> y) ~> x ~> y) ~> case (x ~> y)
}

Fact = Fix <| Lam fun f => Lam fun x =>
  If (Bin (==) x (Val 0))
     (Val 1)
     (Bin (*) x (App f (Bin (-) x (Val 1))))

eval = rec (eval 'x: t x ~> x) => case (type fun t => t) {
  Bin f x y = f (eval x) (eval y)
  If b c a = eval if eval b then c else a
  App f x = eval f (eval x)
  Lam f x = eval (f (Val x))
  Fix f = let f = eval f in rec f' => fun x => f f' x
  Val x = x
}

do App Fact (Val 5) |> eval |> Int.toText |> print
