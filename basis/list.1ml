local import "prelude"

...List

isNil = case {nil = true, _::_ = false}

head = case {nil = none, x::_ = some x}
tail = case {nil = none, _::xs = some xs}

rec foldr (::) nil = case {nil, x::xs = x::foldr (::) nil xs}

rec foldl (::) nil = case {nil, x::xs = foldl (::) (x::nil) xs}

length = foldl (const 1 >> (+)) 0

rec nth n = case {
  nil = none
  x :: xs = if n == 0 then some x else nth (n-1) xs
}

revPrependTo = foldl (::)
rev = revPrependTo nil
cat hs ts = revPrependTo ts (rev hs)

map xy = foldl (xy >> (::)) nil >> rev

filter p = foldl (fun x ys => if p x then x::ys else ys) nil >> rev

flatMap xys = foldl (fun x ys => revPrependTo ys (xys x)) nil >> rev

toText toText = rev >> foldl (fun x s => toText x ++ " :: " ++ s) "nil"
