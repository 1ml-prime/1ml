import "./primitives"

Succ = {
  type t _ = {}
}

Bool = {
  ...Bool
  not b = if b then false else true
  toText b = if b then "true" else "false"
}

Fun = {
  type t a b = a ~> b
  id x = x
  const x _ = x
  bot = rec (bot: _ -> _) => fun x => bot x
  curry f x y = f (x, y)
  uncurry f (x, y) = f x y
  flip f x y = f y x
  (f >> g) x = g (f x)
  (f << g) x = f (g x)
  x |> f = f x
  f <| x = f x
}

Alt :> {
  type t _ _
  inl 'a 'b: a -> t a b
  inr 'a 'b: b -> t a b
  case 'a 'b 'o: {inl: a ~> o, inr: b ~> o} -> t a b ~> o
} = {
  type t a b = wrap (type o) -> {inl: a ~> o, inr: b ~> o} ~> o
  inl x (type o) c : o = c.inl x
  inr x (type o) c : o = c.inr x
  case c (x : t _ _) = x _ c
}

Alt = {
  local ...Fun
  ...Alt
  either inl inr = case {inl, inr}
  plus f g = either (f >> inl) (g >> inr)
}

Opt = {
  type t = Alt.t {}
  none = Alt.inl {}
  some = Alt.inr
  case {none, some} = Alt.case {inl {} = none, inr = some}
}

Pair = {
  type t a b = (a, b)
  fst (x, _) = x
  snd (_, y) = y
  cross f g (x, y) = (f x, g y)
  fork f g x = (f x, g x)
}

List = {
  ...rec {type t _} => {type t x = Opt.t (x, t x)}
  nil = Opt.none
  hd :: tl = Opt.some (hd, tl)
  case {nil, ::} = Opt.case {
    none = nil
    some (hd, tl) = hd :: tl
  }
}

{either, inl, inr, plus} = Alt
{false, not, true} = Bool
{<<, <|, >>, |>, bot, const, curry, flip, id, uncurry} = Fun
{%, *, +, -, /, <, <=, <>, ==, >, >=} = Int
{::, nil} = List
{none, some} = Opt
{cross, fork, fst, snd} = Pair
{++, print} = Text
