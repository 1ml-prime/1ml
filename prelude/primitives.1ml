local
  pbo (p: _ -> _) l r = p (l, r)

  PolyEq (type t) = {
    == = pbo (primitive "==" t)
    <> = pbo (primitive "<>" t)
  }

type bool = primitive "bool"
type char = primitive "char"
type int = primitive "int"
type text = primitive "text"

Bool = {
  true = primitive "true" {}
  false = primitive "false" {}
  ...PolyEq bool
}

Char = {
  toInt = primitive "Char.toInt"
  fromInt = primitive "Char.fromInt"
  print = primitive "Char.print"
  ...PolyEq char
}

System = {
  exit 'a = primitive "System.exit" a
}

Int = {
  + = pbo primitive "Int.+"
  - = pbo primitive "Int.-"
  * = pbo primitive "Int.*"
  / = pbo primitive "Int./"
  % = pbo primitive "Int.%"
  < = pbo primitive "Int.<"
  > = pbo primitive "Int.>"
  <= = pbo primitive "Int.<="
  >= = pbo primitive "Int.>="
  toText = primitive "Int.toText"
  print = primitive "Int.print"
  ...PolyEq int
}

Text = {
  ++ = pbo primitive "Text.++"
  < = pbo primitive "Text.<"
  > = pbo primitive "Text.>"
  <= = pbo primitive "Text.<="
  >= = pbo primitive "Text.>="
  length = primitive "Text.length"
  sub = pbo primitive "Text.sub"
  fromChar = primitive "Text.fromChar"
  print = primitive "Text.print"
  ...PolyEq text
}
