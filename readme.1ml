local import "prelude.1ml"



do Int.print (3 + 5)



type t = int              ;; t = type int
type pair x y = (x, y)    ;; pair = fun (x : type) => fun (y : type) => (x, y)

type MONAD (m : type -> type) = {
  return 'a : a ~> m a
  bind 'a 'b : m a -> (a ~> m b) ~> m b
}

type SIG = {
  type t                       ;; t : type
  type u a                     ;; u : (a : type) -> type
  type v = int                 ;; v : (= type int)
  type w a (c : type -> type) = (u a, c t)
  ;; w : (a : type) -> (c : (_ : type) -> type) -> (= type {_1: u a, _2: c t})
}



pair x y = {fst = x, snd = y}
p = pair 5 "foo"



do {pair} : {pair 'a 'b : a -> b -> {fst : a, snd : b}}



do {pair} : {pair : 'a -> 'b -> a -> b -> {fst : a, snd : b}}



do {pair} : {pair : '(a : type) -> '(b : type) -> a -> b -> {fst : a, snd : b}}



f (id 'a : a -> a) = (id 5, id "")
p = f (fun x => x)



rec type stream t = {hd : t, tl : () ~> opt (stream t)} ;; creates rec type
single x : stream _ = {hd = x, tl = fun () => none}  ;; b : t rolls value into t
{hd = n} = single 5                    ;; pattern match rec value
do Int.print n                         ;; or:
do Int.print (single 7).hd             ;; access rec value




rec count i =
  if i <> 0 then count (i - 1)

rec repeat x : stream _ =
  {hd = x, tl () = some (repeat x)}



rec even x : stream _ = {hd = x, tl () = some (odd (x + 1))}
and odd x : stream _ = {hd = x, tl () = some (even (x + 1))}



type OPT = {
  type opt a
  none 'a : opt a
  some 'a : a -> opt a
  caseopt 'a 'b : opt a -> b -> (a ~> b) ~> b
}
Opt :> OPT = {
  ;; Church encoding; it requires the abstract type opt a to be implemented
  ;; with a polymorphic (i.e., large) type. Thus, wrap the type.
  type opt a = wrap (b : type) -> b -> (a ~> b) ~> b
  none (b : type) (n : b) (s : _ ~> b) = n
  some x (b : type) (n : b) (s : _ ~> b) = s x
  caseopt (xo : opt _) = xo _
}
